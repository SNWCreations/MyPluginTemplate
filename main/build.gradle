import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.5.0'
    }
}

plugins {
    id 'java'

    // Utility plugin to run a Minecraft server, useful when debugging
    // Check for updates at https://github.com/jpenilla/run-task
    id("xyz.jpenilla.run-paper") version "2.3.0"

    // A Gradle plugin that generates plugin.yml
    // https://github.com/Minecrell/plugin-yml
    // We don't use SpiGradle generator there
    id 'net.minecrell.plugin-yml.bukkit' version '0.6.0'

    id 'com.gradleup.shadow' version '8.3.3'
}

group = parent.group
version = parent.version

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "jitpack"
        url = "https://jitpack.io/"
    }
    maven {
        name = "PaperMC"
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
}

def mockBukkitVer = "3.9.0"
dependencies {
    // noinspection VulnerableLibrariesLocal
    compileOnly "org.spigotmc:spigot-api:${project.minecraft_version}-R0.1-SNAPSHOT"

    // Test dependencies
    testImplementation 'org.mockito:mockito-core:4.11.0'
    testImplementation "com.github.seeseemelk:MockBukkit-v${project.api_version}:${mockBukkitVer}"
    testImplementation 'org.assertj:assertj-core:3.24.1'

    // NMS
    // Note: Don't forget to add NMS submodule
    //  if you supported other Minecraft version as well, just like
    // compileOnly project(":nms_v1_XX_RX")
    // implementation project(path: ":nms_v1_XX_RX", configuration: "reobf")
    implementation project(":nms_common") // Introduce the NMSAdapter interface
    compileOnly project(":nms_v1_20_R1") // Just don't let IDEA complain
    implementation project(path: ":nms_v1_20_R1", configuration: "reobf")
}

def targetJavaVersion = project.java_version as int
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

def mc = project.minecraft_version
tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion(mc)
        systemProperty('com.mojang.eula.agree', true)
    }
}

static def gitShortCommitId() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

def GIT_COMMIT = gitShortCommitId()

shadowJar {
    archiveBaseName = parent.name
    archiveClassifier = GIT_COMMIT + ".shadow"

    // Relocate your dependencies there
    // Change this
    List.<String>of(
        // Put dependency package names here
    ).forEach { relocate it, "${plugin_package}.include.$it" }
    dependencies {
        List.of(
                "org.jetbrains:annotations:.*",
                "com.google.code.gson:gson:.*",
                "net.kyori:.*"
        ).forEach { exclude(dependency(it)) }
    }
}

bukkit {
    // Default values can be overridden if needed
    name = parent.name
    version = project.version
    description = 'This is a template plugin' // Change this
    // website = 'https://example.com' // Change this
    authors = ['SNWCreations'] // Change this
    // contributors = [] // Change this

    // Plugin main class (required) // Change this
    main = "${project.plugin_package}.${project.plugin_main_class}"

    // Mark plugin for supporting Folia
    // foliaSupported = true

    // API version (should be set for 1.13+)
    apiVersion = project.api_version

    // Other possible properties from plugin.yml (optional)
    // load = 'STARTUP' // or 'POSTWORLD'
    // depend = []
    // softDepend = []
    // loadBefore = []
    // defaultPermission = 'OP' // 'TRUE', 'FALSE', 'OP' or 'NOT_OP'
    // provides = []

    // Change this
    // permissions {
    //     'template.*' {
    //         children = ['testplugin.test'] // Defaults permissions to true
    //         // You can also specify the values of the permissions
    //         childrenMap = ['testplugin.test': false]
    //     }
    //     'template.test' {
    //         description = 'Allows you to run the test command'
    //         setDefault('OP') // 'TRUE', 'FALSE', 'OP' or 'NOT_OP'
    //     }
    // }
}

jar {
    archiveBaseName = parent.name
    archiveClassifier = GIT_COMMIT + '.no-shadow'
    if (Boolean.parseBoolean(dev_build)) {
        manifest {
            attributes(
                    'Dev-Build': 'true'
            )
        }
    }
}

tasks.build {
    dependsOn shadowJar
}

// Based on ProGuard official example
tasks.register('proguard', ProGuardTask) {
    verbose()

    // Specify the input jars, output jars, and library jars.
    injars shadowJar.archiveFile
    outjars "$buildDir/libs/${shadowJar.archiveFileName.get().replace(".jar", "-obf.jar")}"

    // Automatically handle the Java version of this build.
    if (System.getProperty('java.version').startsWith('1.')) {
        // Before Java 9, the runtime classes were packaged in a single jar file.
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {
        // As of Java 9, the runtime classes are packaged in modular jmod files.
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        // The following one line is used to prevent VerifyError caused by missing XML class references from libby
        // Disabled as we don't use libby currently
        // libraryjars "${System.getProperty('java.home')}/jmods/java.xml.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        //libraryjars "${System.getProperty('java.home')}/jmods/....."
    }

    dontwarn()
    dontshrink()
    dontoptimize()
//    dontpreverify()

    dontusemixedcaseclassnames()
    useuniqueclassmembernames()

    // Save the obfuscation mapping to a file, so you can de-obfuscate any stack
    // traces later on. Keep a fixed source file attribute and all line number
    // tables to get line numbers in the stack traces.
    // You can comment this out if you're not interested in stack traces.

    printmapping "$buildDir/libs/obfmap.${GIT_COMMIT}.txt"
    keepattributes 'Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,EnclosingMethod'

    // Preserve all annotations.

    keepattributes '*Annotation*'

    renamesourcefileattribute 'SourceFile'

    // Preserve all public applications.

    keepclasseswithmembers 'public class * { \
        public static void main(java.lang.String[]); \
    }'

    // Preserve all native method names and the names of their classes.

    keepclasseswithmembernames includedescriptorclasses: true, 'class * { \
        native <methods>; \
    }'

    // Preserve the special static methods that are required in all enumeration
    // classes.

    keepclassmembers allowoptimization: true, 'enum * { \
        public static **[] values(); \
        public static ** valueOf(java.lang.String); \
    }'

    // Explicitly preserve all serialization members. The Serializable interface
    // is only a marker interface, so it wouldn't save them.
    keepclassmembers 'class * implements java.io.Serializable { \
        static final long serialVersionUID; \
        static final java.io.ObjectStreamField[] serialPersistentFields; \
        private void writeObject(java.io.ObjectOutputStream); \
        private void readObject(java.io.ObjectInputStream); \
        java.lang.Object writeReplace(); \
        java.lang.Object readResolve(); \
    }'

    flattenpackagehierarchy 'snw.counterstrike'

    // Items that need to be preserved;
    // typically classes that are dynamically created using Class.forName:
    keep "class ${plugin_package}.${plugin_main_class}"
    keep "class ${plugin_package}.include.** { *; }"

    // Gson integration
    keep "class * extends com.google.gson.TypeAdapter"
    keep "class * implements com.google.gson.TypeAdapterFactory"
    keep "class * implements com.google.gson.JsonSerializer"
    keep "class * implements com.google.gson.JsonDeserializer"
    keepclassmembers allowobfuscation: true, 'class * { \
        @com.google.gson.annotations.SerializedName <fields>; \
    }'
    keep allowobfuscation: true, allowshrinking: true, 'class com.google.gson.reflect.TypeToken'
    keep allowobfuscation: true, allowshrinking: true, 'class * extends com.google.gson.reflect.TypeToken'

    doFirst {
        // We must delay the library jar insertion because NMS module may not compiled yet
        libraryjars getAllDependencyFiles(project).collect {i -> i.getAbsolutePath()}
    }
}

tasks.proguard {
    dependsOn shadowJar
}

tasks.build {
    dependsOn proguard
}

static Collection<File> getAllDependencyFiles(Project project) {
    var container = project.configurations
    List<Configuration> toScan = [
            container.compileClasspath,
            container.runtimeClasspath
    ]
    Set<File> result = new HashSet<>()
    for (final def conf in toScan) {
        var collected = getAllDependencyFilesFromConf(conf)
        result.addAll(collected)
    }
    return result
}

static Collection<File> getAllDependencyFilesFromConf(Configuration conf) {
    Set<File> result = new HashSet<>()
    for (final def dep in conf.allDependencies) {
        Collection<File> collected
        if (dep instanceof ProjectDependency) {
            var depProj = dep.dependencyProject
            collected = getAllDependencyFiles(depProj)
        } else {
            collected = conf.files(dep)
        }
        result.addAll(collected)
    }
    return result
}

if (Boolean.parseBoolean(dev_build)) {
    proguard.enabled = false
}